Basic Ubuntu Commands for Beginner:
1. sudo
sudo (SuperUser DO) Linux command allows you to run programs or other commands with administrative privileges, just like “Run as administrator” in Windows. This is useful when, for example, you need to modify files in a directory that your user wouldn’t normally have access to.

2. apt-get
apt-get is the one of the most important Ubuntu commands every beginner must know. It is used to install, update, upgrade and remove any package. apt-get basically works on a database of available packages. Here is the list of different apt-get commands:
1. sudo apt-get update
apt-get update with super user privileges is the first command you need to run in any Linux system after a fresh install. This command updates the database and let your system know if there are newer packages available or not.
2. sudo apt-get upgrade
After updating the package database, next step is to to upgrade the installed packages. For upgrading all the packages with available updates you can use this command.
Eg: sudo apt-get upgrade <package-name>
3. sudo apt-get install
If you know the name of the package, then you can easily install a program using this command:
Eg: sudo apt-get install <package-name> 
4. sudo apt-get remove <package-name> 
When it comes to removing the installed program apt-get remove command suits your need. You only have to know the exact package name of the software you want to uninstall.

If you don’t know the package name, use below ubuntu basic command to list all the packages installed on your system and then copy the package name from the list:
Eg: dpkg --list
Now run the apt-get remove command as sudo in order to remove the software:
Eg: sudo apt-get remove <package-name>
5. sudo apt-get purge
apt-get purge command is used when you want to remove a software completely from your system with its configuration or data files so that no longer personalized settings will be available during reinstallation.
Run the apt-get purge command as sudo in order to remove the software completely:
Eg: sudo apt-get purge <package-name>
6. sudo apt-get autoremove
apt-get autoremove command is used to remove any unnecessary packages. Unnecessary means, whenever you install an application, the system will also install the software that this application depends on. It is common in Ubuntu that applications share the same libraries. When you remove the application the dependency will stay on your system.

So run apt-get autoremove as sudo after uninstalling a package to remove unwanted software dependencies.

3. ls
ls (list) command lists all files and folders in your current working directory. You can also specify paths to other directories if you want to view their contents.

4. cd
cd (change directory”) Linux command also known as chdir used to change the current working directory. It’s one of the most used basic Ubuntu commands. Using this command is easy, just type cd followed by the the folder name. You can use full paths to folders or simply the name of a folder within the directory you are currently working. Some common uses are:

cd /  – Takes you to the root directory.
cd .. – Takes you up one directory level.

5. pwd
pwd (print working directory) Ubuntu command displays the full pathname of the current working directory.

6. cp
cp (copy) Linux command allows you to copy a file. You should specify both the file you want to be copied and the location you want it copied to – for example, cp xyz /home/myfiles would copy the file “xyz” to the directory “/home/myfiles”.

7. mv
mv (move) command allows you to move files. You can also rename files by moving them to the directory they are currently in, but under a new name. The usage is the same as cp – for example mv xyz /home/myfiles would move the file “xyz” to the directory “/home/myfiles”.

8. rm
rm (remove) command removes the specified file.

rmdir (“remove directory”) – Removes an empty directory.
rm -r (“remove recursively”) – Removes a directory along with its content.
9. mkdir
mkdir (make directory) command allows you to create a new directory. You can specify where you want the directory created – if you do not do so, it will be created in your current working directory.

10. history
history command displays all of your previous commands up to the history limit.

11. df -h
df (display filesystem) command displays information about the disk space usage of all mounted filesystems.

12. du
du (directory usage) command displays the size of a directory and all of its subdirectories.

13. free
free – Displays the amount of free space available on the system.

14. uname -a
uname -a – Provides a wide range of basic information about the system.

15. top
top – Displays the processes using the most system resources at any given time. “q” can be used to exit.

16.fmt
fmt by default with no option used format all the words present in the given file in a single line.

$ cat kt.txt
hello
everyone.
Have
a
nice 
day.

/* fmt by default puts all words 
   in a single line and prints on
   stdout. */
$fmt kt.txt
hello everyone. Have a nice day.
To save or write the formatted output you can use fmt as :


/* Here the formatted output gets 
   written in dv.txt */
$fmt kt.txt > dv.txt

17. touch
The touch command is an essential Linux command for creating a valid empty file. You can create files on the go in your terminal and fill them up later or in real-time – based on your requirements. It’s also the go-to command for changing the timestamps.

Using -c option with touch command avoids creating new files. For example the following command will not create a file called leena if it does not exists.

# touch -c leena

If you like to change the only modification time of a file called leena, then use the -m option with touch command. Please note it will only updates the last modification times (not the access times) of the file.

# touch -m leena

18. cp
The cp command is just a short way of telling your machine to copy a file or directory from one folder to another. It is among other de-facto Linux commands you can’t live without. You can copy multiple files to a directory right from your terminal with this neat command.

19. mv
Short for a move, it’s a supplement to the cut operation you perform in the GUI. Just like cp, you can use the mv command to move either single or multiple files from one location to another. You can force this Linux command to transfer large files with the -f parameter.

20. comm
One of the original Unix commands that found its way to the Linux world, you can use comm to compare two files for common and distinct lines. This is an essential tool for many that need to process large amounts of files on the terminal.
$comm file1.txt file2.txt

21. TZ
By default, “date” command uses the time zone defined in path “/etc/localtime”. Linux user can change the time zone via Terminal by using command “TZ”.
Syntax: TZ=Name_of_Time_Zone date
Example:

TZ=GMT date
22.date
To operate the system on a specific date, you can change the date by using “-d”.
Syntax: date -d Date_to_operate_system_on
Example:

date -d now
date -d yesterday
date -d tomorrow
date -d last-Sunday
date -d “1997-04-22”

23.Ps
The command “ps” which is also known as process status command is used to provide information about the processes currently running on the system, including their respective process identification numbers (PIDs).
Syntax: ps

24.uptime
The command “uptime” provides information about how long the system has been running in one line. Result for this command includes the current time, the time duration system has been running for, the number of users who are currently logged on, and the system load averages for the past 1, 5, and 15 minutes respectively.
Syntax: uptime

25.grep
The command “grep” is used to search for a text in the specified file/folder.
Syntax: grep “expression_to_be_Searched” file_name_to_search_in
Example:

grep “Are” B

26.zip
The command “zip” is used to compress one or more files and store them in a new file with .zip extension.

Syntax: zip new_zip_file_name.zip
Example:

zip Files.zip Check.txt Test.txt Output.txt

27.unzip
The command “unzip” is used to decompress a .zip file and extract all the files within to current directory.
Syntax: unzip zip_file_name.zip
Example:

unzip Files.zip

